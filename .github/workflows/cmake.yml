name: CMake

on:
  # push:
  #   branches: [ "master" ]
  # pull_request:
  #   branches: [ "master" ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest] # [ubuntu-latest]
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_DOCUMENTATION=OFF

    - name: Show versions
      # Using CMake show versions of CMake and the compiler
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target show_version

    - name: Build
      uses: mathiasvr/command-output@v2.0.0
      id: build
      with:
        # Build your program with the given configuration
        run: cmake --build '${{github.workspace}}/build' --config ${{env.BUILD_TYPE}}
        shell: bash

    - name: Count compiler warnings
      env:
        IN_STDOUT: "${{ steps.build.outputs.stdout }}"
        IN_STDERR: "${{ steps.build.outputs.stderr }}"
      run: |
        import re 
        import os
        output = ""
        output += os.environ.get('IN_STDOUT')
        output += os.environ.get('IN_STDERR')
        warning_count = 0;
        stringlist = output.splitlines()
        for line in stringlist:
            # Visual Studio
            ret = re.search("(.*)\(\d*,\d*\): warning C", line)
            if ret:
                if "UKCppLog\\test" not in ret.groups()[0]:
                  # https://en.cppreference.com/w/c/chrono/localtime
                  # The implementation of localtime_s in Microsoft CRT is incompatible with the C standard 
                  # since it has reversed parameter order and returns errno_t.
                  if "warning C4996" not in line:
                    warning_count += 1
            # Clang / GCC
            ret = re.search("(.*):\d*:\d*: warning: ", line)
            if ret:
                if "UKCppLog/test" not in ret.groups()[0]:
                  # Fix lets the code crash
                  if "[-Wexit-time-destructors]" not in line:
                    warning_count += 1
        print("warning_count", warning_count)
        env_file = os.getenv('GITHUB_ENV')
        with open(env_file, "a") as file:
          file.write("compile_warnings={}\n".format(warning_count))
          if 0 == warning_count:
            file.write("compile_warnings_color=green")
          else:
            file.write("compile_warnings_color=orange")
      shell: python

    - name: Build Badge
      uses: schneegans/dynamic-badges-action@v1.6.0
      with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 6935a607aff6233d996070495bba70b7
          filename: ${{ matrix.os}}-build.json
          label: Build
          message: ${{ steps.build.outcome == 'success' && 'completed' || 'failed'}}
          color: ${{ steps.build.outcome == 'success' && 'green' || 'red'}}
    - name: Build Warnings Badge
      uses: schneegans/dynamic-badges-action@v1.6.0
      with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 6935a607aff6233d996070495bba70b7
          filename: ${{ matrix.os}}-build-warnings.json
          label: Compiler warnings
          message: ${{ env.compile_warnings }}
          color: ${{ env.compile_warnings_color }}

    - name: Test
      id: test
      working-directory: ${{github.workspace}}/build/test
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
    - name: Test Badge
      uses: schneegans/dynamic-badges-action@v1.6.0
      with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 6935a607aff6233d996070495bba70b7
          filename: ${{ matrix.os}}-test.json
          label: Test
          message: ${{ steps.test.outcome == 'success' && 'passed' || 'failed'}}
          color: ${{ steps.test.outcome == 'success' && 'green' || 'red'}}

    - name: Run clang-tidy
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd ${{github.workspace}}/src
        clang-tidy -header-filter=UKCppLog -checks=*,-modernize-use-trailing-return-type,-llvmlibc-*,-llvm-header-guard,-fuchsia-default-arguments-calls,-altera-unroll-loops,-llvm-include-order,-cppcoreguidelines-macro-usage,-abseil-string-find-startswith *.cpp *.hpp -- -I/usr/include/ -I/usr/include/x86_64-linux-gnu -I/usr/lib/gcc/x86_64-linux-gnu/11/include -I/usr/include/c++/11 -I/usr/include/x86_64-linux-gnu/c++/11 -std=c++17 -DVERSION_STRING=\"0.0.0\" > ~/clang-tidy.txt 2>&1
  
    - name: Show outputfile
      if: matrix.os == 'ubuntu-latest'
      run: more ~/clang-tidy.txt

    - name: Analyse clang-tidy
      if: matrix.os == 'ubuntu-latest'
      run : |
        import re

        output = ""
        with open("~/clang-tidy.txt") as file:
            output += file.read()
        
        warning_count = 0
        error_count = 0
        stringlist = output.splitlines()
        for line in stringlist:
            ret = re.search(":\d*:\d*: warning:", line)
            if ret:
                warning_count += 1
            ret = re.search(":\d*:\d*: error:", line)
            if ret:
                error_count += 1
        
        print("warning_count", warning_count)
        print("error_count", error_count)
        env_file = os.getenv('GITHUB_ENV')
        with open(env_file, "a") as file:
          if 0 < error_count: 
            file.write("clang_tidy_warnings={} errors\n".format(error_count))
          else:
            file.write("clang_tidy_warnings={} warnings\n".format(warning_count))
          if 0 < error_count: 
            file.write("clang_tidy_warnings_color=red")
          else:
            if 6 >= warning_count:
              file.write("clang_tidy_warnings_color=green")
            else:
              file.write("clang_tidy_warnings_color=orange")

      shell: python

    - name: Clang-tidy Warnings Badge
      if: matrix.os == 'ubuntu-latest'
      uses: schneegans/dynamic-badges-action@v1.6.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 6935a607aff6233d996070495bba70b7
        filename: ${{ matrix.os}}-clang-tidy-warnings.json
        label: Clang-tidy
        message: ${{ env.clang_tidy_warnings }}
        color: ${{ env.clang_tidy_warnings_color }}